# The sagemath code for checking the correctness of the implementation of MixColumn function

P = PolynomialRing(GF(2),32,'x')

X_set = list(P.gens())

def CNOT(set,a,b):
	set[b] = set[a]+set[b]
	return


def REWIRE(set,a,b):
	c = set[a]
	set[a] = set[b]
	set[b] = c
	return

word = [X_set[i] for i in range(32)]

# 92 CNOT gates 
CNOT(word, 31  , 23 );       
CNOT(word, 15  , 31 );       
CNOT(word,  4  , 12 );       
CNOT(word, 21  , 13 );       
CNOT(word,  9  , 17 );       
CNOT(word, 27  , 11 );       
CNOT(word, 28  ,  4 );       
CNOT(word,  5  , 21 );       
CNOT(word, 24  ,  0 );       
CNOT(word,  7  , 15 );       
CNOT(word,  1  ,  9 );       
CNOT(word,  6  , 14 );       
CNOT(word, 16  , 24 );       
CNOT(word, 22  ,  6 );       
CNOT(word, 31  , 16 );       
CNOT(word,  8  , 24 );       
CNOT(word, 26  , 18 );       
CNOT(word, 30  , 22 );       
CNOT(word, 10  , 26 );       
CNOT(word, 23  ,  8 );       
CNOT(word, 13  , 30 );       
CNOT(word, 29  , 13 );       
CNOT(word, 13  ,  5 );       
CNOT(word,  4  , 29 );       
CNOT(word, 11  ,  4 );       
CNOT(word, 19  , 11 );       
CNOT(word, 12  , 13 );       
CNOT(word, 23  , 19 );       
CNOT(word, 31  ,  4 );       
CNOT(word, 20  , 12 );       
CNOT(word, 12  , 28 );       
CNOT(word, 27  , 20 );       
CNOT(word, 19  , 20 );       
CNOT(word, 31  , 27 );       
CNOT(word, 15  , 12 );       
CNOT(word,  3  , 27 );       
CNOT(word, 11  ,  3 );       
CNOT(word,  2  , 11 );       
CNOT(word, 18  , 19 );       
CNOT(word, 10  , 11 );       
CNOT(word, 18  , 10 );       
CNOT(word,  2  , 18 );       
CNOT(word,  9  , 10 );       
CNOT(word,  9  ,  2 );       
CNOT(word, 17  , 18 );       
CNOT(word, 25  , 17 );       
CNOT(word, 17  ,  1 );       
CNOT(word, 24  , 25 );       
CNOT(word,  8  ,  9 );       
CNOT(word, 15  , 24 );       
CNOT(word, 15  , 11 );       
CNOT(word,  0  ,  8 );       
CNOT(word, 23  , 15 );       
CNOT(word, 16  , 17 );       
CNOT(word,  0  , 16 );       
CNOT(word, 31  ,  0 );       
CNOT(word, 23  , 16 );       
CNOT(word,  6  , 23 );       
CNOT(word,  7  , 31 );       
CNOT(word, 22  , 31 );       
CNOT(word,  6  , 30 );       
CNOT(word, 14  ,  7 );       
CNOT(word, 21  , 14 );       
CNOT(word,  5  ,  6 );       
CNOT(word, 21  , 22 );       
CNOT(word, 29  ,  5 );       
CNOT(word, 28  , 21 );       
CNOT(word, 21  , 29 );       
CNOT(word, 13  , 21 );       
CNOT(word, 27  , 12 );       
CNOT(word, 26  , 27 );       
CNOT(word, 20  , 28 );       
CNOT(word,  4  , 20 );       
CNOT(word,  1  , 26 );       
CNOT(word, 30  , 14 );       
CNOT(word, 12  ,  4 );       
CNOT(word, 19  ,  3 );       
CNOT(word, 27  , 19 );       
CNOT(word, 25  ,  1 );       
CNOT(word, 24  ,  0 );       
CNOT(word,  0  ,  1 );       
CNOT(word, 26  ,  2 );       
CNOT(word,  9  , 25 );       
CNOT(word,  7  , 15 );       
CNOT(word, 23  ,  7 );       
CNOT(word, 14  ,  6 );       
CNOT(word, 17  ,  9 );       
CNOT(word, 31  , 23 );       
CNOT(word, 18  , 26 );       
CNOT(word,  6  , 22 );       
CNOT(word,  0  , 17 );       
CNOT(word, 11  , 27 );    

#Rewiring 

REWIRE(word,  0, 24);
REWIRE(word,  1, 25);
REWIRE(word,  1, 17);
REWIRE(word,  2, 18);
REWIRE(word,  2, 10);
REWIRE(word,  3, 19);
REWIRE(word,  3, 11);
REWIRE(word,  5, 29);
REWIRE(word,  5, 13);
REWIRE(word,  6, 22);
REWIRE(word,  6, 30);
REWIRE(word,  6, 14);
REWIRE(word,  7, 15);
REWIRE(word,  8, 16);
REWIRE(word, 12, 28);
REWIRE(word, 12, 20);
REWIRE(word, 23, 31);   


# Obtain the transformation matrix from the coefficients of the ANFs of the output 
M=[[word[i].coefficient({X_set[j]:1}) for j in range(32)]  for  i in range(32)]


MixCol_Matrix=[
[0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],
[1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
[0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0],
[0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
[0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0],
[0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0],
[0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1],
[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1],
[0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1],
[0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0],
[0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1],
[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1],
[0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0],
[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1],
[1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
[1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1],
[0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0],
[0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1],
[0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1],
[0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0]
]

# Check whether M is equal to the 32X32 Mixcloumn matrix
M == MixCol_Matrix